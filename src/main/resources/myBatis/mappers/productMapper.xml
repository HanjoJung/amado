<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="productMapper">
	<select id="seqNext" resultType="java.lang.Integer">
		select product_seq.nextval from dual
	</select>

	<select id="getCount" parameterType="Pager" resultType="java.lang.Integer">
		select count(productNum) from product
		where 
			<if test="brand  != null"> brand in 
				<foreach collection="brand" item="brand" open="(" close=")" separator=",">#{brand}</foreach> AND 
			</if>
			(productCode like '%'||#{search}||'%' or productName like '%'||#{search}||'%') 
			<if test="kind != null and kind != ''"> and kind = #{kind} </if>
			<if test="minPrice != 0 and maxPrice != 0"> and price between #{minPrice} and #{maxPrice} </if>
	</select>
	
	<select id="list" parameterType="Pager" resultType="ProductDTO">
		select * from
			(select ROWNUM R, p.* from
				(select productNum, productCode, productName, price, kind, score, hit, sale, good, reg_date from 
					(select * from product where
					<if test="minPrice != 0 and maxPrice != 0">price between #{minPrice} and #{maxPrice} and</if>
					<if test="brand  != null and brand  != ''"> brand in 
						<foreach collection="brand" item="brand" open="(" close=")" separator=",">#{brand}</foreach> AND 
					</if>
					(productCode like '%'||#{search}||'%' or productName like '%'||#{search}||'%') 
					<if test="kind != null and kind != ''">and kind = #{kind} </if>
					)
					left join 
					(select avg(score)*20 score, productNum from review group by productNum)
					using (productNum)
					order by 
					<choose>
						<when test="sort == 'priceAsc'"> price asc, </when>
						<when test="sort == 'priceDesc'"> price desc, </when>
						<when test="sort == 'score'"> score desc NULLS LAST, </when>
					</choose>
					reg_date desc
				) p 
			)
		where R between #{startRow} and #{lastRow}
	</select>
	
	<select id="selectOne" parameterType="java.lang.Integer" resultType="ProductDTO">
		select * from (select * from product)
		left join 
		(select avg(score)*20 score, productNum from review group by productNum)
		using (productNum)
		where productNum = #{productNum}
	</select>
	
	<insert id="insert" parameterType="ProductDTO">
		insert into product 
		values(#{productNum}, #{productName}, #{price}, #{kind}, #{contents}, 0, 0, 0, #{brand}, #{stock}, sysdate, #{productCode})
	</insert>
	
	<update id="update" parameterType="ProductDTO">
		update product
		<set>
	  		<if test="productName != null and productName != ''"> productName = #{productName},</if> 
	  		<if test="productCode != null and productCode != ''"> productCode = #{productCode},</if> 
	  		<if test="kind != null and kind != ''"> kind = #{kind},</if>
	  		<if test="contents != null and contents != ''"> contents = #{contents},</if>
	  		<if test="brand != null and brand != ''"> brand = #{brand},</if>
	  		<if test="price != null and price != 0"> price = #{price},</if>
	  		<if test="hit != null and hit != 0"> hit = hit+#{hit},</if>
	  		<if test="sale != null and sale != 0"> sale = sale+#{sale},</if>
	  		<if test="good != null and good != 0"> good = good+#{good},</if>
	  		<if test="stock != null and stock != 0"> stock = stock+#{stock}</if> 
		</set>
		where productNum = #{productNum}
	</update>
	
	<delete id="delete">
		delete product 
		where productNum = #{productNum}
	</delete>
	
	<select id="latest" parameterType="Map" resultType="productDTO">
	
		select productNum, productName, productCode, price from product
		where productNum in
		<choose>
			<when test="productNum != null">
				<foreach collection="productNum" item="productNum" open="(" close=")" separator=",">#{productNum}</foreach>
			</when>
			<otherwise>
			(0)
			</otherwise>
		</choose>
	</select>
</mapper>